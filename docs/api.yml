openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22119
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter books by name
          required: false
          schema:
            type: string

        - in: query
          name: releaseDate
          description: Filter books by release date intervals (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date

        - in: query
          name: page
          description: Page number for pagination (default:1)
          required: false
          schema:
            type: integer
            default: 1

        - in: query
          name: pageSize
          description: Number of items per page for pagination (default:50)
          required: false
          schema:
            type: integer
            default: 50

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  /authors:
    get:
      summary: Get all authors
      description: Get all the authors in the database
      responses:
        "200":
          description: The list of authors

    put:
      summary: Update author by ID
      description: Update author information based on the provided ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        "200":
          description: Author information has been updated successfully

    delete:
      summary: Delete author by ID
      description: Delete an author based on the provided ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Author deleted successfully

  /books/{bookID}/authors/{authorID}:
    put:
      parameters:
        - name: bookID
          in: path
          schema:
            type: string
          required: true

        - name: authorID
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"

  /books/authors:
    put:
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        "200":
          description: Authors updated successfully

components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            author:
              $ref: "#/components/schemas/Author"

    Author:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sex:
          enum:
            - M
            - F

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    UpdateBookAuthor:
      type: object
      properties:
        bookID:
          type: string
        authorID:
          type: string

#Reponse à la question de la vidéo: 
          
#Créez un schéma "Author" distinct.
#Ajoutez une liste d'auteurs au schéma "Book".
#Utilisez un schéma "BookWithAuthors" pour représenter les détails du livre avec les auteurs.
#Modifiez l'opération get pour récupérer des livres avec les auteurs associés.
#Modifiez l'opération put pour permettre la spécification des auteurs lors de la création ou de la mise à jour d'un livre.