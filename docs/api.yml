openapi: 3.0.3
info:
  title: Library API
  version: 1.1.1
  description: STD22119
servers:
  - url: https://library.com
paths:
  /books:
    get:
      tags:
        - "Books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
  /authors:
    get:
      tags:
        - "Authors"
      summary: Get all authors
      description: Get all the authors in the database
      operationId: Get Authors
      parameters:
        - $ref: "#/components/parameters/queryPagination"
        - $ref: "#/components/parameters/pathPagination"
      responses:
        200:
          description: The author's list
    put:
      tags:
        - "Authors"
      summary: Update author by id
      description: Update information according to id
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Author"
      responses:
        200:
          description: Author updated successfully
    delete:
      tags:
        - "Authors"
      summary: Delete author by id
      description: Deleting an author by id
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author deleted successfully
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "Books"
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: authorId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The updated book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/authors:
    put:
      tags:
        - "Books"
      summary: Update Book authors
      description: Update the authors of multiple books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Authors updated successfully
  /topics:
    get:
      tags:
        - "Topics"
      summary: Get all topics
      description: Retrieve a list of all topics
      responses:
        200:
          description: List of topics
    put:
      tags:
        - "Topics"
      summary: Create or update a topic
      description: Create or update a topic
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        200:
          description: Topic created or updated successfully
    delete:
      tags:
        - "Topics"
      summary: Delete a topic by ID
      description: Delete a topic by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Topic deleted successfully
  /books/{bookId}/topics/{topicId}:
    put:
      tags:
        - "Topics"
      summary: Update the topic of a book
      description: Update the topic of a book by book ID and topic ID
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: topicId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The updated book with the new topic
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
  /books/topics:
    put:
      tags:
        - "Topics"
      summary: Update topics for multiple books
      description: Update the topics of multiple books
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookTopic"
      responses:
        200:
          description: Topics updated successfully
  /topic:
    get:
      tags:
        - "Topics"
      summary: Get all topics with pagination
      description: Retrieve a list of all topics with pagination
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Page size for pagination
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: List of topics
  /authors/topics:
    get:
      tags:
        - "Topics"
      summary: Get topics for all authors
      description: Retrieve topics for all authors
      responses:
        200:
          description: List of objects containing authorName, authorId, and topicName
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    authorName:
                      type: string
                    authorId:
                      type: string
                    topicName:
                      type: string
components:
  schemas:
    Book:
      allOf:
        - $ref: "#/components/schemas/CrupdateBook"
        - type: object
          properties:
            author:
              $ref: "#/components/schemas/Author"
    Author:
      type: object
      properties:
        authorId:
          type: string
        name:
          type: string
        sex:
          enum:
            - M
            - F
    CrupdateBook:
      type: object
      properties:
        bookId:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: string
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Topic:
      type: object
      properties:
        topicId:
          type: string
        topicName:
          type: string
    UpdateBookTopic:
      type: object
      properties:
        bookId:
          type: string
        topicId:
          type: string
  responses:
    defaultResponse:
      description: Default response structure
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
              body:
                type: object
    Response200:
      $ref: "#/components/responses/defaultResponse"
      description: Response for HTTP 200 (OK)
    Response400:
      $ref: "#/components/responses/defaultResponse"
      description: Response for HTTP 400 (Bad Request)
    Response403:
      $ref: "#/components/responses/defaultResponse"
      description: Response for HTTP 403 (Forbidden)
    Response500:
      $ref: "#/components/responses/defaultResponse"
      description: Response for HTTP 500 (Internal Server Error)

  parameters:
    queryPagination:
      in: query
      name: page
      description: Page number for pagination
      required: false
      schema:
        type: object
        properties:
          Page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50

    pathPagination:
      in: path
      name: page
      description: Page number for pagination
      required: true
      schema:
        type: object
        properties:
          Page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
